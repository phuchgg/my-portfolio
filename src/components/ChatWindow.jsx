import React, { useState, useRef, useEffect } from 'react';
import '../css/Chat.css';

const parseMessageWithLinks = (text) => {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    return text.split(urlRegex).map((part, i) => {
        if (urlRegex.test(part)) {
            return (
                <a key={i} href={part} target="_blank" rel="noopener noreferrer" style={{ color: '#007bff' }}>
                    {part}
                </a>
            );
        }
        return part;
    });
};

const conversationFlow = {
    start: {
        text: "Hello b·∫°n tr·∫ª! T√¥i l√† Ho√†ng Gia Ph√∫c, master IELTS, chuy√™n tr·ªã b·ªánh m·∫•t g·ªëc v√† b·ªánh l∆∞·ªùi ü§£. Gi·ªù b·∫°n th√≠ch g√¨ n√®?",
        options: [
            { label: "Kh√≥a h·ªçc", next: "courses" },
            { label: "Kinh nghi·ªám gi·∫£ng d·∫°y", next: "teachingExperience" },
            { label: "Test nh√¢n ph·∫©m", next: "ieltsLuckTest" },
            { label: "H·ªèi xo√°y ƒë√°p x√†m", next: "funnyQA" },
            { label: "Th·∫ßy Ph√∫c tr·∫£ l·ªùi nhanh", next: "quickReply" }
        ]
    },

    // üéì KH√ìA H·ªåC
    courses: {
        text: "Pick kh√≥a h·ªçc n√†o ƒë·ªÉ 'kil' IELTS ƒë√¢y b·∫°n tui?",
        options: [
            { label: "Kh√≥a l·∫•y g·ªëc c·∫•p t·ªëc", next: "basicCourse" },
            { label: "Kh√≥a luy·ªán thi chuy√™n s√¢u", next: "advancedCourse" },
            { label: "L·ªãch h·ªçc & khai gi·∫£ng", next: "schedule" }
        ]
    },
    basicCourse: {
        text: "Kh√≥a n√†y d√†nh ri√™ng cho c√°c b·∫°n m√† c·ª© nghe 'ti·∫øng Anh' l√† nh∆∞ 'ƒë√†n g·∫©y tai tr√¢u' üòù.",
        options: []
    },
    advancedCourse: {
        text: "L·ªõp n√†y cam k·∫øt gi√∫p b·∫°n t·ª´ band th∆∞·ªùng d√¢n th√†nh band 'rich kid' IELTS 8.0+ lu√¥n nha! üòé",
        options: []
    },
    schedule: {
        text: "C·∫≠p nh·∫≠t l·ªãch h·ªçc m·ªõi toanh t·∫°i https://engonow.com/gioi-thieu/luyen-thi-ielts ƒë·ªÉ 'ƒëu trend' s·ªõm nh·∫•t n√®!",
        options: []
    },

    // üìö KINH NGHI·ªÜM GI·∫¢NG D·∫†Y
    teachingExperience: {
        text: "6 nƒÉm 's·ªëng ch·∫øt' c√πng IELTS, h·ªçc vi√™n n√†o qua tay tui c≈©ng ƒë·ªÅu 'bay m√†u' n·ªói s·ª£ ti·∫øng Anh h·∫øt √° üòå.",
        options: []
    },

    // üé≤ TEST NH√ÇN PH·∫®M
    ieltsLuckTest: {
        text: "ƒêang b√≥i ƒëi·ªÉm gi√∫p b·∫°n... üîÆ‚ú®",
        options: [],
        isFortuneGame: true // d√πng flag n√†y ƒë·ªÉ render game mini thay v√¨ hi·ªÉn th·ªã text nh∆∞ b√¨nh th∆∞·ªùng
    },

    // üåÄ H·ªéI XO√ÅY ƒê√ÅP X√ÄM
    funnyQA: {
        text: "B·∫°n h·ªèi g√¨ tui ƒë√°p n·∫•y, ƒë·ªô nh·∫£m th√¨ v√¥ c·ª±c nh∆∞ng c∆∞·ªùi kh√¥ng c∆∞·ªùi r√°ng ch·ªãu √†! üòö",
        options: [
            { label: "IELTS c√≥ gi√∫p c√≥ b·ªì kh√¥ng?", next: "funny1" },
            { label: "Thi IELTS xong gi√†u kh√¥ng?", next: "funny2" },
            { label: "IELTS gi√∫p h·∫øt m·ª•n kh√¥ng?", next: "funny3" }
        ]
    },
    funny1: {
        text: "IELTS th√¨ kh√¥ng ch·∫Øc c√≥ b·ªì, nh∆∞ng c√≥ ƒëi·ªÉm IELTS cao th√¨ b·ªì auto t·ªõi nha üòè.",
        options: []
    },
    funny2: {
        text: "Gi√†u hay kh√¥ng ch∆∞a bi·∫øt, nh∆∞ng gi√†u ki·∫øn th·ª©c th√¨ c√≥ thi·ªát ƒë√≥! ü§ë",
        options: []
    },
    funny3: {
        text: "IELTS kh√¥ng tr·ªã m·ª•n nh∆∞ng th·ª©c khuya √¥n IELTS th√¨ m·ª•n auto t·ªõi thƒÉm ƒë·ªÅu nha b·∫°n üò≠.",
        options: []
    },

    // ‚ö° TH·∫¶Y PH√öC TR·∫¢ L·ªúI NHANH
    quickReply: {
        text: "Th·∫ßy Ph√∫c s·∫µn s√†ng gi·∫£i ƒë√°p nhanh h∆°n c·∫£ t·ªëc ƒë·ªô b·∫°n b·ªã crush t·ª´ ch·ªëi nha ü§£",
        options: [
            { label: "M·∫•t g·ªëc h·ªçc ƒë∆∞·ª£c kh√¥ng th·∫ßy?", next: "quick1" },
            { label: "H·ªçc bao l√¢u m·ªõi thi ƒë∆∞·ª£c?", next: "quick2" },
            { label: "C√°ch nh·ªõ t·ª´ v·ª±ng si√™u t·ªëc?", next: "quick3" }
        ]
    },
    quick1: {
        text: "M·∫•t g·ªëc c√†ng ph·∫£i h·ªçc l·∫π, ch·ª© ƒë·ªÉ l√¢u l√† g·ªëc c≈©ng m·∫•t lu√¥n √° b·∫°n ü§ß.",
        options: []
    },
    quick2: {
        text: "Nhanh ch·∫≠m do b·∫°n, nh∆∞ng nhanh nh·∫•t l√† h·ªçc h√¥m nay, thi ng√†y mai ƒë√≥ (n√≥i ch∆°i th√¥i ƒë·ª´ng tin) üòÜ.",
        options: []
    },
    quick3: {
        text: "Mu·ªën nh·ªõ nhanh ph·∫£i h·ªçc vui. Kh√¥ng vui th√¨ √©p vui, t·∫°i v√¨ √©p d·∫ßu √©p m·ª° ai n·ª° √©p IELTS ha üòÖ.",
        options: []
    }
};


export default function ChatWindow({ onClose }) {
    const [messages, setMessages] = useState([{ sender: 'bot', text: conversationFlow.start.text }]);
    const [options, setOptions] = useState(conversationFlow.start.options);
    const [usedStartOptions, setUsedStartOptions] = useState([]);
    const [usedPaths, setUsedPaths] = useState([]);
    const messagesEndRef = useRef(null);
  
    const handleOptionClick = (option) => {
      const nextNode = conversationFlow[option.next];
      if (!nextNode) return;
  
      const userMessage = { sender: 'user', text: option.label };
      const botReply = { sender: 'bot', text: nextNode.text };
  
      setMessages((prev) => [...prev, userMessage, botReply]);
  
      // N·∫øu l√† node con (quick1, funny2...) th√¨ ghi nh·∫≠n n√≥
      setUsedPaths(prev => [...prev, option.next]);
  
      // N·∫øu l√† node m·∫π (t·ª´ start) th√¨ ch·ªâ ·∫©n khi ƒë√£ ch·ªçn h·∫øt con c·ªßa n√≥ (n·∫øu c√≥)
      const childOptions = nextNode.options || [];
      const allUsed = childOptions.length === 0 || childOptions.every(opt => usedPaths.includes(opt.next));
  
      if (conversationFlow.start.options.find(opt => opt.label === option.label)) {
        if (allUsed) {
          setUsedStartOptions(prev => [...prev, option.label]);
        }
      }
  
      // Tr∆∞·ªùng h·ª£p b√≥i ƒëi·ªÉm
      if (nextNode.isFortuneGame) {
        setMessages(prev => [
          ...prev,
          userMessage,
          { sender: 'bot', text: "ƒêang b√≥i ƒëi·ªÉm gi√∫p b·∫°n... ‚ú®üîÆ" }
        ]);
        setOptions([]);
  
        setTimeout(() => {
          const results = [
            { band: 4.5, msg: 'Nghe r√µ, hi·ªÉu ch·∫≠m, vi·∫øt sai ch√≠nh t·∫£ li√™n t·ª•c. Nh∆∞ng ƒë∆∞·ª£c c√°i... c√≥ c·ªë g·∫Øng üòÖ' },
            { band: 5.0, msg: 'Ng·ªØ ph√°p nh∆∞ l√∫a non, ph√°t √¢m nh∆∞ ti·∫øng g√† g√°y... nh∆∞ng c√≥ t·ªë ch·∫•t ti·ªÅm ·∫©n üê£' },
            { band: 5.5, msg: 'Chi·∫øn sƒ© h·ªçc nh√≥m, g√°nh team v·ªÅ ph·∫ßn nghe. C·∫ßn ‚Äúbuff‚Äù th√™m t·ª´ v·ª±ng nha üí™' },
            { band: 6.0, msg: 'Tr·∫£ l·ªùi ƒë√∫ng ƒë·ªÅ, c√≥ idea r√µ r√†ng, nh∆∞ng... v·∫´n hay b·ªã gi√°m kh·∫£o h·ªèi l·∫°i üò¨' },
            { band: 6.5, msg: '·ªîn √°p! D√≠nh ‚Äúand... and... and then‚Äù h∆°i nhi·ªÅu, nh∆∞ng tinh th·∫ßn r·∫•t IELTS üß†' },
            { band: 7.0, msg: 'Th·∫ßn th√°i band 7, n√≥i r√µ r√†ng, vi·∫øt logic. Ch·ªâ thi·∫øu 1 ch√∫t ‚Äúcollocation th·∫ßn th√°nh‚Äù ‚úçÔ∏è' },
            { band: 7.5, msg: 'G·∫ßn t·ªõi ƒë·ªânh r·ªìi. Ph·∫£n x·∫° t·ªët, t·ª´ v·ª±ng kh√°. Ch·ªâ c·∫ßn ƒë·ª´ng ‚Äúso‚Äù everything l√† ·ªïn üòÇ' },
            { band: 8.0, msg: 'Ch√∫c m·ª´ng th·∫ßn h·ªçc! Band 8 l√† chuy·ªán nh·ªè v·ªõi b·∫°n. N√≥i chuy·ªán nh∆∞ TED Talk üé§' },
            { band: 8.5, msg: 'B·∫°n ƒëang b∆∞·ªõc v√†o v√πng ‚Äúband cao th·ªß‚Äù r·ªìi ƒë√≥. N√™n xem l·∫°i ph√°t √¢m c·ªßa t·ª´ ‚Äúgenre‚Äù th√¥i üòé' },
            { band: 9.0, msg: 'Huy·ªÅn tho·∫°i s·ªëng. Gi√°m kh·∫£o c√≤n nh·ªù b·∫°n d·∫°y l·∫°i ph·∫ßn Speaking Part 3 üò≤' }
          ];
          const result = results[Math.floor(Math.random() * results.length)];
  
          setMessages(prev => [
            ...prev,
            { sender: 'bot', text: `üé≤ B·∫°n b·ªëc ƒë∆∞·ª£c: Band ${result.band}!\n${result.msg}` }
          ]);
  
          const remaining = conversationFlow.start.options.filter(
            opt => !usedStartOptions.includes(opt.label)
          );
          setOptions(remaining);
        }, 1800);
        return;
      }
  
      const nextOpts = nextNode.options?.length
        ? nextNode.options
        : conversationFlow.start.options.filter(opt => !usedStartOptions.includes(opt.label));
  
      setOptions(nextOpts);
    };
  
    useEffect(() => {
        const timeout = setTimeout(() => {
          if (messagesEndRef.current) {
            messagesEndRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
          if (chatBodyRef.current) {
            chatBodyRef.current.scrollTop = chatBodyRef.current.scrollHeight;
          }
        }, 100);
        return () => clearTimeout(timeout);
      }, [messages]);
      
  
    return (
      <div className="chat-window">
        <div className="chat-header">
          <span>M·∫Øc h·ªèi</span>
          <button onClick={onClose}>√ó</button>
        </div>
        <div className="chat-body">
          {messages.map((msg, i) => (
            <div key={i} className={`msg-row ${msg.sender}`}>
              <img
                src={msg.sender === 'user' ? '/images/user-icon.png' : '/images/bot-icon.png'}
                alt="avatar"
                className="avatar"
              />
              <div className={`bubble ${msg.sender}`}>{parseMessageWithLinks(msg.text)}</div>
            </div>
          ))}
          <div ref={messagesEndRef} style={{ float: 'left', clear: 'both', height: 0 }} />
        </div>
        <div className={`chat-footer ${options.length <= 2 ? 'push-bottom' : ''}`}>

        {options.map((opt, i) => (
          <button key={i} className="option-button" onClick={() => handleOptionClick(opt)}>
            {opt.label}
          </button>
        ))}
      </div>
      </div>
    );
  }
  
