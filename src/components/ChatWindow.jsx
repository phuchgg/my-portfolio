import React, { useState, useRef, useEffect } from 'react';
import '../css/Chat.css';

const parseMessageWithLinks = (text) => {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    return text.split(urlRegex).map((part, i) => {
        if (urlRegex.test(part)) {
            return (
                <a key={i} href={part} target="_blank" rel="noopener noreferrer" style={{ color: '#007bff' }}>
                    {part}
                </a>
            );
        }
        return part;
    });
};

const conversationFlow = {
    start: {
        text: "Hello b·∫°n tr·∫ª! T√¥i l√† Ho√†ng Gia Ph√∫c, master IELTS, chuy√™n tr·ªã b·ªánh m·∫•t g·ªëc v√† b·ªánh l∆∞·ªùi ü§£. Gi·ªù b·∫°n th√≠ch g√¨ n√®?",
        options: [
            { label: "Kh√≥a h·ªçc", next: "courses" },
            { label: "Kinh nghi·ªám gi·∫£ng d·∫°y", next: "teachingExperience" },
            { label: "Test nh√¢n ph·∫©m", next: "ieltsLuckTest" },
            { label: "H·ªèi xo√°y ƒë√°p x√†m", next: "funnyQA" },
            { label: "Th·∫ßy Ph√∫c tr·∫£ l·ªùi nhanh", next: "quickReply" }
        ]
    },

    // üéì KH√ìA H·ªåC
    courses: {
        text: "Pick kh√≥a h·ªçc n√†o ƒë·ªÉ 'kil' IELTS ƒë√¢y b·∫°n tui?",
        options: [
            { label: "Kh√≥a l·∫•y g·ªëc c·∫•p t·ªëc", next: "basicCourse" },
            { label: "Kh√≥a luy·ªán thi chuy√™n s√¢u", next: "advancedCourse" },
            { label: "L·ªãch h·ªçc & khai gi·∫£ng", next: "schedule" }
        ]
    },
    basicCourse: {
        text: "Kh√≥a n√†y d√†nh ri√™ng cho c√°c b·∫°n m√† c·ª© nghe 'ti·∫øng Anh' l√† nh∆∞ 'ƒë√†n g·∫©y tai tr√¢u' üòù.",
        options: []
    },
    advancedCourse: {
        text: "L·ªõp n√†y cam k·∫øt gi√∫p b·∫°n t·ª´ band th∆∞·ªùng d√¢n th√†nh band 'rich kid' IELTS 8.0+ lu√¥n nha! üòé",
        options: []
    },
    schedule: {
        text: "C·∫≠p nh·∫≠t l·ªãch h·ªçc m·ªõi toanh t·∫°i https://engonow.com/gioi-thieu/luyen-thi-ielts ƒë·ªÉ 'ƒëu trend' s·ªõm nh·∫•t n√®!",
        options: []
    },

    // üìö KINH NGHI·ªÜM GI·∫¢NG D·∫†Y
    teachingExperience: {
        text: "6 nƒÉm 's·ªëng ch·∫øt' c√πng IELTS, h·ªçc vi√™n n√†o qua tay tui c≈©ng ƒë·ªÅu 'bay m√†u' n·ªói s·ª£ ti·∫øng Anh h·∫øt √° üòå.",
        options: []
    },

    // üé≤ TEST NH√ÇN PH·∫®M
    ieltsLuckTest: {
        text: "H√™n xui IELTS h√¥m nay sao n√®, ch·ªçn l·∫π s·ªë ƒë·∫πp ƒëo nh√¢n ph·∫©m li·ªÅn! üòú",
        options: [
            { label: "1", next: "luck1" },
            { label: "3", next: "luck3" },
            { label: "6", next: "luck6" },
            { label: "7", next: "luck7" },
            { label: "9", next: "luck9" }
        ]
    },
    luck1: {
        text: "B·∫°n ch·ªçn s·ªë 1 t·ª©c l√† x√°c ƒë·ªãnh h√¥m nay thi nghe c·ª© nh∆∞ 'ƒë√†n g·∫£y tai tr√¢u' ü•≤.",
        options: []
    },
    luck3: {
        text: "Ch·ªçn s·ªë 3 nghƒ©a l√† x√°c su·∫•t b·∫°n 'h√™n' IELTS h√¥m nay c√≤n cao h∆°n x√°c su·∫•t crush rep tin nh·∫Øn n·ªØa c∆°! üòò",
        options: []
    },
    luck6: {
        text: "H√¥m nay kh·∫£ nƒÉng IELTS c·ªßa b·∫°n l√™n xu·ªëng th·∫•t th∆∞·ªùng nh∆∞ gi√° bitcoin v·∫≠y ƒë√≥, c·∫©n th·∫≠n nha ü§ì.",
        options: []
    },
    luck7: {
        text: "S·ªë ƒë·∫πp qu√° ha! Band cao thi·ªát ƒë√≥, nh∆∞ng nh·ªõ ƒë·ª´ng ƒë·ªçc 'think' th√†nh 'thinh' nha m√° ü§≠.",
        options: []
    },
    luck9: {
        text: "S·ªë n√†y d√†nh cho ng∆∞·ªùi xu·∫•t ch√∫ng. Nh∆∞ng vi·∫øt sai grammar th√¨ v·∫´n 'xu·∫•t chu·ªìng' nh∆∞ th∆∞·ªùng nha b·∫°n üòÇ.",
        options: []
    },

    // üåÄ H·ªéI XO√ÅY ƒê√ÅP X√ÄM
    funnyQA: {
        text: "B·∫°n h·ªèi g√¨ tui ƒë√°p n·∫•y, ƒë·ªô nh·∫£m th√¨ v√¥ c·ª±c nh∆∞ng c∆∞·ªùi kh√¥ng c∆∞·ªùi r√°ng ch·ªãu √†! üòö",
        options: [
            { label: "IELTS c√≥ gi√∫p c√≥ b·ªì kh√¥ng?", next: "funny1" },
            { label: "Thi IELTS xong gi√†u kh√¥ng?", next: "funny2" },
            { label: "IELTS gi√∫p h·∫øt m·ª•n kh√¥ng?", next: "funny3" }
        ]
    },
    funny1: {
        text: "IELTS th√¨ kh√¥ng ch·∫Øc c√≥ b·ªì, nh∆∞ng c√≥ ƒëi·ªÉm IELTS cao th√¨ b·ªì auto t·ªõi nha üòè.",
        options: []
    },
    funny2: {
        text: "Gi√†u hay kh√¥ng ch∆∞a bi·∫øt, nh∆∞ng gi√†u ki·∫øn th·ª©c th√¨ c√≥ thi·ªát ƒë√≥! ü§ë",
        options: []
    },
    funny3: {
        text: "IELTS kh√¥ng tr·ªã m·ª•n nh∆∞ng th·ª©c khuya √¥n IELTS th√¨ m·ª•n auto t·ªõi thƒÉm ƒë·ªÅu nha b·∫°n üò≠.",
        options: []
    },

    // ‚ö° TH·∫¶Y PH√öC TR·∫¢ L·ªúI NHANH
    quickReply: {
        text: "Th·∫ßy Ph√∫c s·∫µn s√†ng gi·∫£i ƒë√°p nhanh h∆°n c·∫£ t·ªëc ƒë·ªô b·∫°n b·ªã crush t·ª´ ch·ªëi nha ü§£",
        options: [
            { label: "M·∫•t g·ªëc h·ªçc ƒë∆∞·ª£c kh√¥ng th·∫ßy?", next: "quick1" },
            { label: "H·ªçc bao l√¢u m·ªõi thi ƒë∆∞·ª£c?", next: "quick2" },
            { label: "C√°ch nh·ªõ t·ª´ v·ª±ng si√™u t·ªëc?", next: "quick3" }
        ]
    },
    quick1: {
        text: "M·∫•t g·ªëc c√†ng ph·∫£i h·ªçc l·∫π, ch·ª© ƒë·ªÉ l√¢u l√† g·ªëc c≈©ng m·∫•t lu√¥n √° b·∫°n ü§ß.",
        options: []
    },
    quick2: {
        text: "Nhanh ch·∫≠m do b·∫°n, nh∆∞ng nhanh nh·∫•t l√† h·ªçc h√¥m nay, thi ng√†y mai ƒë√≥ (n√≥i ch∆°i th√¥i ƒë·ª´ng tin) üòÜ.",
        options: []
    },
    quick3: {
        text: "Mu·ªën nh·ªõ nhanh ph·∫£i h·ªçc vui. Kh√¥ng vui th√¨ √©p vui, t·∫°i v√¨ √©p d·∫ßu √©p m·ª° ai n·ª° √©p IELTS ha üòÖ.",
        options: []
    }
};


export default function ChatWindow({ onClose }) {
    const [messages, setMessages] = useState([{ sender: 'bot', text: conversationFlow.start.text }]);
    const [options, setOptions] = useState(conversationFlow.start.options);
    const messagesEndRef = useRef(null);

    const handleOptionClick = (option) => {
        const nextNode = conversationFlow[option.next];
        if (!nextNode) return;

        const userMessage = { sender: 'user', text: option.label };
        const botReply = { sender: 'bot', text: nextNode.text };

        const lastMsg = messages[messages.length - 1];
        if (lastMsg?.text === botReply.text) return;

        setMessages((prev) => [...prev, userMessage, botReply]);

        // L·ªçc c√°c n√∫t c√≤n l·∫°i sau khi ch·ªçn
        const allOptions = conversationFlow.start.options;
        const remainingOptions = allOptions.filter((opt) => opt.label !== option.label);
        const nextOptions = nextNode.options?.length ? nextNode.options : remainingOptions;

        setOptions(nextOptions);
    };

    useEffect(() => {
        if (messagesEndRef.current) {
            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
        }
    }, [messages]);

    return (
        <div className="chat-window">
            <div className="chat-header">
                <span>M·∫Øc h·ªèi</span>
                <button onClick={onClose}>√ó</button>
            </div>
            <div className="chat-body">
                {messages.map((msg, i) => (
                    <div key={i} className={`msg-row ${msg.sender}`}>
                        <img
                            src={msg.sender === 'user' ? '/images/user-icon.png' : '/images/bot-icon.png'}
                            alt="avatar"
                            className="avatar"
                        />
                        <div className={`bubble ${msg.sender}`}>
                            {parseMessageWithLinks(msg.text)}
                        </div>

                    </div>
                ))}

                <div ref={messagesEndRef} />
            </div>
            <div className="chat-footer">
                {options.map((opt, i) => (
                    <button key={i} className="option-button" onClick={() => handleOptionClick(opt)}>
                        {opt.label}
                    </button>
                ))}
            </div>
        </div>
    );
}
